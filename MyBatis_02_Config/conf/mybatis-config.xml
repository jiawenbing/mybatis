<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!--1. properties
	resource属性:引入类路径下的资源 
	url属性：引入网络路径或者磁盘路径下的资源
	-->
	<properties resource="dbconfig.properties"></properties>
	
	<!--2. settings包含很多重要的设置项
	setting 用来设置每一个设置项
		name属性 设置项名
		value属性 设置项值
	-->
	<settings>
	<!-- 开启该项配置后，开启驼峰命名规则   lastName==last_name -->
	<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>
	
	<!--3. typeAliases别名处理器，可以为我们的java类起别名  注意：别名不区分大小写-->
	<typeAliases>
		<!-- 为某个java类型起别名
		type属性  java类型的全类名，默认别名就是类名小写 employee
		alias属性  指定新起的别名
		 -->
		<!-- <typeAlias type="com.nuc.sw.bean.Employee" alias="emp"/> -->
		
		<!-- 为某个包下的所有类批量起别名
		name属性  指定包名（为当前包及其下面的所有子包的类都起一个默认别名，就是类名小写）
		 -->
		<!-- <package name="com.nuc.sw.bean"/> -->
		<!-- 在批量起别名的情况下，如果类名重复，使用@Alias("emp")为某个类指定新别名  -->
	</typeAliases>
	
	<!--4. mybatis可以配置多种环境，default指定使用某种环境，达到快速切换环境的效果  -->
	<environments default="dev_mysql">
		<!-- 配置一个具体的环境，必须有transactionManager和dataSource两个标签，id代表当前环境的唯一标识
		 -->
		<environment id="dev_mysql">
			<!-- 事务管理器
				type 事务管理器的类型JDBC（JdbcTransactionFactory）|MANAGED（ManagedTransactionFactory）
				自定义事务管理器 实现TransactionFactory接口，type就是实现类的全类名
			 -->
			<transactionManager type="JDBC"></transactionManager>
			<!-- 数据源
				type 数据源的类型UNPOOLED（UnpooledDataSourceFactory）|POOLED（PooledDataSourceFactory）|JNDI（JndiDataSourceFactory）
				自定义数据源 实现DataSourceFactory接口， type就是实现类的全类名
			 -->
			<dataSource type="POOLED"> 
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		
		<environment id="dev_oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>
		
	</environments>
	
	<!-- 支持多数据库
	type="DB_VENDOR"  VendorDatabaseIdProvider
	作用：得到数据库厂商的不同标识（驱动就是getDatabaseProductName()），mybatis就能根据数据库厂商不同标识执行不同的sql
	MySQL  SQL Server  Oracle
	 -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="SQL Server" value="sqlserver"/>
		<property name="Oracle" value="oracle"/>
	</databaseIdProvider>
	
	<!--5. 将我们写好的sql映射文件（EmployeeMapper.xml）要注册到全局配置文件中（mybatis-config.xml） -->
	<mappers>
		<!-- mapper注册一个sql映射文件 
			注册配置文件
			resource 引用类路径下的sql映射文件
			url  引用网络路径或者磁盘路径下的映射文件
			
			注册接口
			class 
				1.有sql映射文件，映射文件名必须和接口同名，并且放在同一目录下
				2.没有sql映射文件，所有的sql都利用注解写在接口上
				推荐：比较重要的dao接口写配置文件
					不重要的dao接口使用注解
		-->
		<!-- <mapper resource="com/nuc/sw/dao/EmployeeMapper.xml" /> -->
		<!-- <mapper class="com.nuc.sw.dao.EmployeeMapperAnnotation"/> -->
		<!-- 批量注册 -->
		<package name="com.nuc.sw.dao"/>
	</mappers>
	
</configuration>